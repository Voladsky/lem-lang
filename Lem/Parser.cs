// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  LAPTOP-MPBGOA9N
// DateTime: 21.10.2023 16:07:15
// UserName: krylo
// Input file <Parser2.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Lem;

namespace Parser
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,INTNUM=8,REALNUM=9,LPAR=10,RPAR=11,LBRACE=12,
    RBRACE=13,LBRACKET=14,RBRACKET=15,DOT=16,COMMA=17,SEMICOLON=18,
    ASSIGN=19,ID=20,PLUS=21,MINUS=22,MULTIPLY=23,DIVIDE=24,
    LOWER=25,GREATER=26,LOWEREQUAL=27,GREATEREQUAL=28,EQUAL=29,NOTEQUAL=30};

public struct ValueType
{
  public double dVal;
  public string sVal;
  public int iVal;
  public RangeNode rnd;
  public ExprNode ex;
  public ExprListNode exl;
  public IdNode id;
  public StatementNode st;
  public StatementListNode stl;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parser2.y
   public StatementListNode root;
   public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from Parser2.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[31];
  private static State[] states = new State[62];
  private static string[] nonTerms = new string[] {
      "ident", "expr", "exprlist", "assign", "ifstatement", "whilestatement", 
      "forstatement", "statement", "proccall", "stlist", "block", "range", "progr", 
      "$accept", };

  static Parser() {
    states[0] = new State(new int[]{20,21,12,34,6,38,3,45,5,51},new int[]{-13,1,-10,3,-8,61,-4,5,-1,7,-11,33,-5,37,-7,44,-6,50,-9,54});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{20,21,12,34,6,38,3,45,5,51,2,-2},new int[]{-8,4,-4,5,-1,7,-11,33,-5,37,-7,44,-6,50,-9,54});
    states[4] = new State(-4);
    states[5] = new State(new int[]{18,6});
    states[6] = new State(-5);
    states[7] = new State(new int[]{19,8,10,27});
    states[8] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,9,-1,20});
    states[9] = new State(new int[]{21,10,23,12,22,14,25,16,26,18,18,-12});
    states[10] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,11,-1,20});
    states[11] = new State(new int[]{21,-13,23,12,22,-13,25,-13,26,-13,18,-13,11,-13,17,-13,20,-13,12,-13,6,-13,3,-13,5,-13,15,-13});
    states[12] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,13,-1,20});
    states[13] = new State(-14);
    states[14] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,15,-1,20});
    states[15] = new State(new int[]{21,-15,23,12,22,-15,25,-15,26,-15,18,-15,11,-15,17,-15,20,-15,12,-15,6,-15,3,-15,5,-15,15,-15});
    states[16] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,17,-1,20});
    states[17] = new State(new int[]{21,10,23,12,22,14,25,-16,26,-16,18,-16,11,-16,17,-16,20,-16,12,-16,6,-16,3,-16,5,-16,15,-16});
    states[18] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,19,-1,20});
    states[19] = new State(new int[]{21,10,23,12,22,14,25,-17,26,-17,18,-17,11,-17,17,-17,20,-17,12,-17,6,-17,3,-17,5,-17,15,-17});
    states[20] = new State(-18);
    states[21] = new State(-11);
    states[22] = new State(-19);
    states[23] = new State(-20);
    states[24] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,25,-1,20});
    states[25] = new State(new int[]{11,26,21,10,23,12,22,14,25,16,26,18});
    states[26] = new State(-21);
    states[27] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-3,28,-2,32,-1,20});
    states[28] = new State(new int[]{11,29,17,30});
    states[29] = new State(-29);
    states[30] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,31,-1,20});
    states[31] = new State(new int[]{21,10,23,12,22,14,25,16,26,18,11,-23,17,-23});
    states[32] = new State(new int[]{21,10,23,12,22,14,25,16,26,18,11,-22,17,-22});
    states[33] = new State(-6);
    states[34] = new State(new int[]{20,21,12,34,6,38,3,45,5,51},new int[]{-10,35,-8,61,-4,5,-1,7,-11,33,-5,37,-7,44,-6,50,-9,54});
    states[35] = new State(new int[]{13,36,20,21,12,34,6,38,3,45,5,51},new int[]{-8,4,-4,5,-1,7,-11,33,-5,37,-7,44,-6,50,-9,54});
    states[36] = new State(-30);
    states[37] = new State(-7);
    states[38] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,39,-1,20});
    states[39] = new State(new int[]{21,10,23,12,22,14,25,16,26,18,20,21,12,34,6,38,3,45,5,51},new int[]{-8,40,-11,41,-4,5,-1,7,-5,37,-7,44,-6,50,-9,54});
    states[40] = new State(-24);
    states[41] = new State(new int[]{7,42,20,-6,12,-6,6,-6,3,-6,5,-6,2,-6,13,-6});
    states[42] = new State(new int[]{20,21,12,34,6,38,3,45,5,51},new int[]{-8,43,-4,5,-1,7,-11,33,-5,37,-7,44,-6,50,-9,54});
    states[43] = new State(-25);
    states[44] = new State(-8);
    states[45] = new State(new int[]{20,21},new int[]{-1,46});
    states[46] = new State(new int[]{4,47});
    states[47] = new State(new int[]{14,56},new int[]{-12,48});
    states[48] = new State(new int[]{20,21,12,34,6,38,3,45,5,51},new int[]{-8,49,-4,5,-1,7,-11,33,-5,37,-7,44,-6,50,-9,54});
    states[49] = new State(-27);
    states[50] = new State(-9);
    states[51] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,52,-1,20});
    states[52] = new State(new int[]{21,10,23,12,22,14,25,16,26,18,20,21,12,34,6,38,3,45,5,51},new int[]{-8,53,-4,5,-1,7,-11,33,-5,37,-7,44,-6,50,-9,54});
    states[53] = new State(-26);
    states[54] = new State(new int[]{18,55});
    states[55] = new State(-10);
    states[56] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,57,-1,20});
    states[57] = new State(new int[]{18,58,21,10,23,12,22,14,25,16,26,18});
    states[58] = new State(new int[]{20,21,8,22,9,23,10,24},new int[]{-2,59,-1,20});
    states[59] = new State(new int[]{15,60,21,10,23,12,22,14,25,16,26,18});
    states[60] = new State(-28);
    states[61] = new State(-3);

    rules[1] = new Rule(-14, new int[]{-13,2});
    rules[2] = new Rule(-13, new int[]{-10});
    rules[3] = new Rule(-10, new int[]{-8});
    rules[4] = new Rule(-10, new int[]{-10,-8});
    rules[5] = new Rule(-8, new int[]{-4,18});
    rules[6] = new Rule(-8, new int[]{-11});
    rules[7] = new Rule(-8, new int[]{-5});
    rules[8] = new Rule(-8, new int[]{-7});
    rules[9] = new Rule(-8, new int[]{-6});
    rules[10] = new Rule(-8, new int[]{-9,18});
    rules[11] = new Rule(-1, new int[]{20});
    rules[12] = new Rule(-4, new int[]{-1,19,-2});
    rules[13] = new Rule(-2, new int[]{-2,21,-2});
    rules[14] = new Rule(-2, new int[]{-2,23,-2});
    rules[15] = new Rule(-2, new int[]{-2,22,-2});
    rules[16] = new Rule(-2, new int[]{-2,25,-2});
    rules[17] = new Rule(-2, new int[]{-2,26,-2});
    rules[18] = new Rule(-2, new int[]{-1});
    rules[19] = new Rule(-2, new int[]{8});
    rules[20] = new Rule(-2, new int[]{9});
    rules[21] = new Rule(-2, new int[]{10,-2,11});
    rules[22] = new Rule(-3, new int[]{-2});
    rules[23] = new Rule(-3, new int[]{-3,17,-2});
    rules[24] = new Rule(-5, new int[]{6,-2,-8});
    rules[25] = new Rule(-5, new int[]{6,-2,-11,7,-8});
    rules[26] = new Rule(-6, new int[]{5,-2,-8});
    rules[27] = new Rule(-7, new int[]{3,-1,4,-12,-8});
    rules[28] = new Rule(-12, new int[]{14,-2,18,-2,15});
    rules[29] = new Rule(-9, new int[]{-1,10,-3,11});
    rules[30] = new Rule(-11, new int[]{12,-10,13});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> stlist
{ root = ValueStack[ValueStack.Depth-1].stl; }
        break;
      case 3: // stlist -> statement
{ CurrentSemanticValue.stl = new StatementListNode(); CurrentSemanticValue.stl.Add(ValueStack[ValueStack.Depth-1].st); }
        break;
      case 4: // stlist -> stlist, statement
{ ValueStack[ValueStack.Depth-2].stl.Add(ValueStack[ValueStack.Depth-1].st); CurrentSemanticValue.stl = ValueStack[ValueStack.Depth-2].stl; }
        break;
      case 5: // statement -> assign, SEMICOLON
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-2].st; }
        break;
      case 6: // statement -> block
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-1].stl; }
        break;
      case 7: // statement -> ifstatement
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-1].st; }
        break;
      case 8: // statement -> forstatement
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-1].st; }
        break;
      case 9: // statement -> whilestatement
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-1].st; }
        break;
      case 10: // statement -> proccall, SEMICOLON
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-2].st; }
        break;
      case 11: // ident -> ID
{ CurrentSemanticValue.id = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 12: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.st = new AssignNode(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 13: // expr -> expr, PLUS, expr
{ CurrentSemanticValue.ex = new BinOpNode(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].sVal); }
        break;
      case 14: // expr -> expr, MULTIPLY, expr
{ CurrentSemanticValue.ex = new BinOpNode(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].sVal); }
        break;
      case 15: // expr -> expr, MINUS, expr
{ CurrentSemanticValue.ex = new BinOpNode(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].sVal); }
        break;
      case 16: // expr -> expr, LOWER, expr
{ CurrentSemanticValue.ex = new BinOpNode(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].sVal); }
        break;
      case 17: // expr -> expr, GREATER, expr
{ CurrentSemanticValue.ex = new BinOpNode(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].sVal); }
        break;
      case 18: // expr -> ident
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 19: // expr -> INTNUM
{ CurrentSemanticValue.ex = new IntNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 20: // expr -> REALNUM
{ CurrentSemanticValue.ex = new DoubleNode(ValueStack[ValueStack.Depth-1].dVal); }
        break;
      case 21: // expr -> LPAR, expr, RPAR
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 22: // exprlist -> expr
{ CurrentSemanticValue.exl = new ExprListNode(); CurrentSemanticValue.exl.Add(ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 23: // exprlist -> exprlist, COMMA, expr
{ ValueStack[ValueStack.Depth-3].exl.Add(ValueStack[ValueStack.Depth-1].ex); CurrentSemanticValue.exl = ValueStack[ValueStack.Depth-3].exl; }
        break;
      case 24: // ifstatement -> IF, expr, statement
{ CurrentSemanticValue.st = new IfNode(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].st, null); }
        break;
      case 25: // ifstatement -> IF, expr, block, ELSE, statement
{ CurrentSemanticValue.st = new IfNode(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-3].stl, ValueStack[ValueStack.Depth-1].st); }
        break;
      case 26: // whilestatement -> WHILE, expr, statement
{ CurrentSemanticValue.st = new WhileNode(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].st); }
        break;
      case 27: // forstatement -> FOR, ident, IN, range, statement
{ CurrentSemanticValue.st = new ForNode(ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].rnd, ValueStack[ValueStack.Depth-1].st); }
        break;
      case 28: // range -> LBRACKET, expr, SEMICOLON, expr, RBRACKET
{ CurrentSemanticValue.rnd = new RangeNode(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].ex); }
        break;
      case 29: // proccall -> ident, LPAR, exprlist, RPAR
{ CurrentSemanticValue.st = new ProcCallNode(ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].exl); }
        break;
      case 30: // block -> LBRACE, stlist, RBRACE
{ CurrentSemanticValue.stl = ValueStack[ValueStack.Depth-2].stl; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
