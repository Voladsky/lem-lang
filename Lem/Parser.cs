// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  LAPTOP-MPBGOA9N
// DateTime: 21.10.2023 15:20:17
// UserName: krylo
// Input file <Parser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Lem;

namespace Parser
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,THEN=8,INTNUM=9,REALNUM=10,LPAR=11,RPAR=12,
    LBRACE=13,RBRACE=14,LBRACKET=15,RBRACKET=16,DOT=17,COMMA=18,
    SEMICOLON=19,ASSIGN=20,ID=21,PLUS=22,MINUS=23,MULTIPLY=24,
    DIVIDE=25,LOWER=26,GREATER=27,LOWEREQUAL=28,GREATEREQUAL=29,EQUAL=30,
    NOTEQUAL=31};

public struct ValueType
{
  public double dVal;
  public string sVal;
  public int iVal;
  public ExprNode ex;
  public ExprListNode exl;
  public IdNode id;
  public StatementNode st;
  public StatementListNode stl;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parser.y
   public StatementListNode root;
   public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from Parser.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[42];
  private static State[] states = new State[71];
  private static string[] nonTerms = new string[] {
      "ident", "expr", "comp", "term", "factor", "exprlist", "assign", "ifstatement", 
      "whilestatement", "forstatement", "statement", "proccall", "stlist", "block", 
      "compOp", "addOp", "multOp", "progr", "$accept", "range", };

  static Parser() {
    states[0] = new State(new int[]{21,25,13,43,6,47,3,54,5,65},new int[]{-18,1,-13,3,-11,70,-7,5,-1,7,-14,42,-8,46,-10,53,-9,64,-12,68});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{21,25,13,43,6,47,3,54,5,65,2,-2},new int[]{-11,4,-7,5,-1,7,-14,42,-8,46,-10,53,-9,64,-12,68});
    states[4] = new State(-4);
    states[5] = new State(new int[]{19,6});
    states[6] = new State(-5);
    states[7] = new State(new int[]{20,8,11,36});
    states[8] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-2,9,-3,10,-4,13,-5,16,-1,24});
    states[9] = new State(-12);
    states[10] = new State(new int[]{26,30,27,31,28,32,29,33,30,34,31,35,19,-13,12,-13,18,-13,8,-13,16,-13,13,-13},new int[]{-15,11});
    states[11] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-3,12,-4,13,-5,16,-1,24});
    states[12] = new State(-14);
    states[13] = new State(new int[]{22,28,23,29,26,-23,27,-23,28,-23,29,-23,30,-23,31,-23,19,-23,12,-23,18,-23,8,-23,16,-23,13,-23},new int[]{-16,14});
    states[14] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-4,15,-5,16,-1,24});
    states[15] = new State(-24);
    states[16] = new State(new int[]{24,26,25,27,22,-27,23,-27,26,-27,27,-27,28,-27,29,-27,30,-27,31,-27,19,-27,12,-27,18,-27,8,-27,16,-27,13,-27},new int[]{-17,17});
    states[17] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-5,18,-1,24});
    states[18] = new State(-28);
    states[19] = new State(-31);
    states[20] = new State(-32);
    states[21] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-2,22,-3,10,-4,13,-5,16,-1,24});
    states[22] = new State(new int[]{12,23});
    states[23] = new State(-33);
    states[24] = new State(-34);
    states[25] = new State(-11);
    states[26] = new State(-29);
    states[27] = new State(-30);
    states[28] = new State(-25);
    states[29] = new State(-26);
    states[30] = new State(-17);
    states[31] = new State(-18);
    states[32] = new State(-19);
    states[33] = new State(-20);
    states[34] = new State(-21);
    states[35] = new State(-22);
    states[36] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-6,37,-2,41,-3,10,-4,13,-5,16,-1,24});
    states[37] = new State(new int[]{12,38,18,39});
    states[38] = new State(-40);
    states[39] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-2,40,-3,10,-4,13,-5,16,-1,24});
    states[40] = new State(-16);
    states[41] = new State(-15);
    states[42] = new State(-6);
    states[43] = new State(new int[]{21,25,13,43,6,47,3,54,5,65},new int[]{-13,44,-11,70,-7,5,-1,7,-14,42,-8,46,-10,53,-9,64,-12,68});
    states[44] = new State(new int[]{14,45,21,25,13,43,6,47,3,54,5,65},new int[]{-11,4,-7,5,-1,7,-14,42,-8,46,-10,53,-9,64,-12,68});
    states[45] = new State(-41);
    states[46] = new State(-7);
    states[47] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-2,48,-3,10,-4,13,-5,16,-1,24});
    states[48] = new State(new int[]{8,49});
    states[49] = new State(new int[]{13,43},new int[]{-14,50});
    states[50] = new State(new int[]{7,51,21,-35,13,-35,6,-35,3,-35,5,-35,2,-35,14,-35});
    states[51] = new State(new int[]{13,43},new int[]{-14,52});
    states[52] = new State(-36);
    states[53] = new State(-8);
    states[54] = new State(new int[]{21,25},new int[]{-1,55});
    states[55] = new State(new int[]{4,56});
    states[56] = new State(new int[]{15,59},new int[]{-20,57});
    states[57] = new State(new int[]{13,43},new int[]{-14,58});
    states[58] = new State(-38);
    states[59] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-2,60,-3,10,-4,13,-5,16,-1,24});
    states[60] = new State(new int[]{18,61});
    states[61] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-2,62,-3,10,-4,13,-5,16,-1,24});
    states[62] = new State(new int[]{16,63});
    states[63] = new State(-39);
    states[64] = new State(-9);
    states[65] = new State(new int[]{9,19,10,20,11,21,21,25},new int[]{-2,66,-3,10,-4,13,-5,16,-1,24});
    states[66] = new State(new int[]{13,43},new int[]{-14,67});
    states[67] = new State(-37);
    states[68] = new State(new int[]{19,69});
    states[69] = new State(-10);
    states[70] = new State(-3);

    rules[1] = new Rule(-19, new int[]{-18,2});
    rules[2] = new Rule(-18, new int[]{-13});
    rules[3] = new Rule(-13, new int[]{-11});
    rules[4] = new Rule(-13, new int[]{-13,-11});
    rules[5] = new Rule(-11, new int[]{-7,19});
    rules[6] = new Rule(-11, new int[]{-14});
    rules[7] = new Rule(-11, new int[]{-8});
    rules[8] = new Rule(-11, new int[]{-10});
    rules[9] = new Rule(-11, new int[]{-9});
    rules[10] = new Rule(-11, new int[]{-12,19});
    rules[11] = new Rule(-1, new int[]{21});
    rules[12] = new Rule(-7, new int[]{-1,20,-2});
    rules[13] = new Rule(-2, new int[]{-3});
    rules[14] = new Rule(-2, new int[]{-3,-15,-3});
    rules[15] = new Rule(-6, new int[]{-2});
    rules[16] = new Rule(-6, new int[]{-6,18,-2});
    rules[17] = new Rule(-15, new int[]{26});
    rules[18] = new Rule(-15, new int[]{27});
    rules[19] = new Rule(-15, new int[]{28});
    rules[20] = new Rule(-15, new int[]{29});
    rules[21] = new Rule(-15, new int[]{30});
    rules[22] = new Rule(-15, new int[]{31});
    rules[23] = new Rule(-3, new int[]{-4});
    rules[24] = new Rule(-3, new int[]{-4,-16,-4});
    rules[25] = new Rule(-16, new int[]{22});
    rules[26] = new Rule(-16, new int[]{23});
    rules[27] = new Rule(-4, new int[]{-5});
    rules[28] = new Rule(-4, new int[]{-5,-17,-5});
    rules[29] = new Rule(-17, new int[]{24});
    rules[30] = new Rule(-17, new int[]{25});
    rules[31] = new Rule(-5, new int[]{9});
    rules[32] = new Rule(-5, new int[]{10});
    rules[33] = new Rule(-5, new int[]{11,-2,12});
    rules[34] = new Rule(-5, new int[]{-1});
    rules[35] = new Rule(-8, new int[]{6,-2,8,-14});
    rules[36] = new Rule(-8, new int[]{6,-2,8,-14,7,-14});
    rules[37] = new Rule(-9, new int[]{5,-2,-14});
    rules[38] = new Rule(-10, new int[]{3,-1,4,-20,-14});
    rules[39] = new Rule(-20, new int[]{15,-2,18,-2,16});
    rules[40] = new Rule(-12, new int[]{-1,11,-6,12});
    rules[41] = new Rule(-14, new int[]{13,-13,14});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> stlist
{ root = ValueStack[ValueStack.Depth-1].stl; }
        break;
      case 3: // stlist -> statement
{ CurrentSemanticValue.stl = new StatementListNode(); CurrentSemanticValue.stl.Add(ValueStack[ValueStack.Depth-1].st); }
        break;
      case 4: // stlist -> stlist, statement
{ ValueStack[ValueStack.Depth-2].stl.Add(ValueStack[ValueStack.Depth-1].st); CurrentSemanticValue.stl = ValueStack[ValueStack.Depth-2].stl; }
        break;
      case 5: // statement -> assign, SEMICOLON
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-2].st; }
        break;
      case 6: // statement -> block
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-1].stl; }
        break;
      case 7: // statement -> ifstatement
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-1].st; }
        break;
      case 8: // statement -> forstatement
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-1].st; }
        break;
      case 9: // statement -> whilestatement
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-1].st; }
        break;
      case 10: // statement -> proccall, SEMICOLON
{ CurrentSemanticValue.st = ValueStack[ValueStack.Depth-2].st; }
        break;
      case 11: // ident -> ID
{ CurrentSemanticValue.id = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 12: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.st = new AssignNode(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 13: // expr -> comp
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 14: // expr -> comp, compOp, comp
{ CurrentSemanticValue.ex = new BinOpNode(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].sVal); }
        break;
      case 15: // exprlist -> expr
{ CurrentSemanticValue.exl = new ExprListNode(); CurrentSemanticValue.exl.Add(ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 16: // exprlist -> exprlist, COMMA, expr
{ ValueStack[ValueStack.Depth-3].exl.Add(ValueStack[ValueStack.Depth-1].ex); CurrentSemanticValue.exl = ValueStack[ValueStack.Depth-3].exl; }
        break;
      case 17: // compOp -> LOWER
{ CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal; }
        break;
      case 23: // comp -> term
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 24: // comp -> term, addOp, term
{ CurrentSemanticValue.ex = new BinOpNode(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].sVal); }
        break;
      case 27: // term -> factor
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 28: // term -> factor, multOp, factor
{ CurrentSemanticValue.ex = new BinOpNode(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].sVal); }
        break;
      case 31: // factor -> INTNUM
{ CurrentSemanticValue.ex = new IntNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 32: // factor -> REALNUM
{ CurrentSemanticValue.ex = new DoubleNode(ValueStack[ValueStack.Depth-1].dVal); }
        break;
      case 33: // factor -> LPAR, expr, RPAR
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 34: // factor -> ident
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 35: // ifstatement -> IF, expr, THEN, block
{ CurrentSemanticValue.st = new IfNode(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stl, null); }
        break;
      case 36: // ifstatement -> IF, expr, THEN, block, ELSE, block
{ CurrentSemanticValue.st = new IfNode(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].stl, ValueStack[ValueStack.Depth-1].stl); }
        break;
      case 37: // whilestatement -> WHILE, expr, block
{ CurrentSemanticValue.st = new WhileNode(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].stl); }
        break;
      case 40: // proccall -> ident, LPAR, exprlist, RPAR
{ CurrentSemanticValue.st = new ProcCallNode(ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].exl); }
        break;
      case 41: // block -> LBRACE, stlist, RBRACE
{ CurrentSemanticValue.stl = ValueStack[ValueStack.Depth-2].stl; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
